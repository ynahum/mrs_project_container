bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: f1tenth_1
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    #bt_xml_filename: "/home/dev/ros_ws/src/my_car/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml"
    default_bt_xml_filename: $(find-pkg-share my_car)/behavior_trees/minimal.xml
    default_nav_to_pose_bt_xml: $(find-pkg-share my_car)/behavior_trees/minimal.xml
    default_nav_through_poses_bt_xml: $(find-pkg-share my_car)/behavior_trees/minimal.xml
    #bt_xml_filename: "/home/dev/ros_ws/src/my_car/behavior_trees/minimal.xml"
    plugin_lib_names:
      - nav2_follow_path_action_bt_node
      - nav2_rate_controller_bt_node
      - nav2_pipeline_sequence_bt_node
      - my_nav2_update_plan_from_topic_bt_node

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    # should be replaced with MPPI?
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 2.6
      max_vel_y: 0.0
      max_vel_theta: 8.0
      min_speed_xy: 0.0
      max_speed_xy: 2.6
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 6.0
      acc_lim_y: 0.0
      acc_lim_theta: 15.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -5.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.5
      angular_granularity: 0.1
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: map
      robot_base_frame: f1tenth_1
      use_sim_time: True
      rolling_window: true
      width: 2  # was 3, smaller costmap due to speed or even 1.5
      height: 2 # was 3, smaller costmap due to speed or even 1.5
      resolution: 0.1 # was 0.05, we reduce resolution for higher update
      robot_radius: 0.284 # length=0.5 width=0.27 => radius=0.284
      plugins: ["obstacle_layer", "inflation_layer"] # ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0 # was 3.0  for race we want it sharper
        inflation_radius: 0.29 # was 0.55
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        sensor_frame: "lidar" # if not provided by the msg
        observation_sources: scan
        scan:
          topic: /autodrive/f1tenth_1/lidar
          data_type: "LaserScan"
          marking: True
          clearing: True
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: False
        map_subscribe_transient_local: True
      always_send_full_costmap: True


map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""


robot_state_publisher:
  ros__parameters:
    use_sim_time: True

