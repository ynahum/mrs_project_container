bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: f1tenth_1
    odom_topic: /odom
    # in mili seconds (20hz)
    bt_loop_duration: 50
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    #bt_xml_filename: "/home/dev/ros_ws/src/my_car/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml"
    default_bt_xml_filename: $(find-pkg-share my_car)/behavior_trees/minimal.xml
    default_nav_to_pose_bt_xml: $(find-pkg-share my_car)/behavior_trees/minimal.xml
    #bt_xml_filename: "/home/dev/ros_ws/src/my_car/behavior_trees/minimal.xml"
    plugin_lib_names:
      - nav2_follow_path_action_bt_node
      - nav2_rate_controller_bt_node
      - nav2_pipeline_sequence_bt_node
      - my_nav2_update_plan_from_topic_bt_node

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    #goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      # Extremely permissive settings (effectively disabled)
      radius: 1000.0  # Enormous radius in meters
      time_allowance: 100000.0  # ~28 hours in seconds
      required_movement_radius: 0.0  # Set to zero - any movement counts as progress
      movement_time_allowance: 600.0  # 10 minutes - extremely permissive
    #  required_movement_radius: 0.5
    #  movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    #general_goal_checker:
    #  stateful: True
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      enable_controller_prints: false
      enable_optimizer_prints: true
      enable_path_handler_prints: false
      time_steps: 36
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.4
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 22.5 # real according to spec 22.88 m/s
      vx_min: -0.35
      vy_max: 2.5
      wz_max: 40.77 # max_wz = (max_vx=22.88 / WheelBase=0.324) * tan(delta_max=0.5236)
      ax_max: 10.0 # need to check the actual max
      ay_max: 10.0 # need to check the actual max
      ax_min: -10.0 # need to check the actual max
      az_max: 10.5 # max angular  rad/s^2. need to understand how much
      iteration_count: 1
      prune_distance: 10.7
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "Ackermann"
      visualize: true
      TrajectoryVisualizer:
        trajectory_step: 15
        time_step: 5
      AckermannConstraints:
        min_turning_r: 0.2 # 0.561 Rmin = WheelBase=0.324/tan(delta_max=0.5236) for some reason not enough
      critics: ["ConstraintCritic", "CostCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      # GoalCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   threshold_to_consider: 1.4
      # GoalAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 3.0
      #   threshold_to_consider: 0.5
      PreferForwardCritic:
        enabled: true
        cost_power: 2
        cost_weight: 8.0
        threshold_to_consider: 0.0
      # Option to replace Cost and use Obstacles instead
      # ObstaclesCritic:
      #   enabled: true
      #   cost_power: 1
      #   repulsion_weight: 1.5
      #   critical_weight: 20.0
      #   consider_footprint: false
      #   collision_cost: 10000.0
      #   collision_margin_distance: 0.1
      #   near_goal_distance: 0.5
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: false
        collision_cost: 1000000.0
        near_goal_distance: 1.0
        trajectory_point_step: 2
      PathAlignCritic:
        enabled: true
        cost_power: 2
        cost_weight: 20.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.5
        offset_from_furthest: 20
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        forward_preference: true
      # VelocityDeadbandCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 35.0
      #   deadband_velocities: [0.05, 0.05, 0.05]
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 5.0
      global_frame: f1tenth_1
      robot_base_frame: f1tenth_1
      use_sim_time: True
      rolling_window: True
      width: 8  # was 3, smaller costmap due to speed or even 1.5
      height: 3 # was 3, smaller costmap due to speed or even 1.5
      resolution: 0.1 # was 0.05, we reduce resolution for higher update
      robot_radius: 0.284 # length=0.5 width=0.27 => radius=0.284
      #footprint: [[0.135, 0.0], [0.0, 0.25], [-0.135, 0.0], [0.0, -0.25]]  # Approximation of circle      plugins: ["obstacle_layer", "inflation_layer"] # ["voxel_layer", "inflation_layer"]
      #plugins: ["obstacle_layer", "inflation_layer", "static_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 5.0 # was 3.0  for race we want it sharper
        inflation_radius: 0.29 # was 0.55
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        sensor_frame: "lidar" # if not provided by the msg
        observation_sources: scan
        scan:
          topic: /autodrive/f1tenth_1/lidar
          data_type: "LaserScan"
          marking: True
          clearing: True
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: False
        map_subscribe_transient_local: True
      always_send_full_costmap: True


map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""


robot_state_publisher:
  ros__parameters:
    use_sim_time: True

